{"version":3,"sources":["components/heading.js","apis/detailsAPI.js","components/details.js","constants/constants.js","components/chat.js","App.js","serviceWorker.js","index.js"],"names":["heading","props","children","details","userDetails","user","JSON","parse","stringify","Details","state","handleChange","event","target","name","value","setState","handleSubmit","setUserDetails","history","push","chatId","match","params","newChat","className","htmlFor","type","this","onChange","placeholder","id","readOnly","checked","onClick","React","urls","socketUrl","Chat","users","messages","socket","sendMessage","emit","message","chatMessage","getUserDetails","map","window","location","href","class","_id","onKeyPress","e","which","socketIOClient","on","console","log","data","App","path","exact","component","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0da7af60.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nconst heading = (props) => {\r\n    return <h3>\r\n        {props.children}\r\n    </h3>\r\n}\r\n\r\nexport default heading;","let details = null;\r\n\r\nclass userDetails {\r\n    static setUserDetails(user) {\r\n        details = JSON.parse(JSON.stringify(user));\r\n    }\r\n    static getUserDetails() {\r\n        return details;\r\n    }\r\n}\r\n\r\nexport default userDetails;","import * as React from 'react';\r\nimport Heading from './heading';\r\nimport userDetails from '../apis/detailsAPI';\r\n\r\nclass Details extends React.Component {\r\n    state = {};\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            chatId: props.match.params.chatId || \"\",\r\n            newChat: !props.match.params.chatId\r\n        };\r\n    }\r\n\r\n    handleChange = (event)=>{\r\n        let {name, value} = event.target;\r\n        this.setState({[name]:value});\r\n    }\r\n    render() {\r\n        return (<>\r\n        <Heading>User Details</Heading>\r\n            <form>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Name:</label>\r\n                    <input type=\"text\" value={this.state.name} onChange={this.handleChange} className=\"form-control\" placeholder=\"Enter Name\" id=\"name\" name=\"name\"/>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"chatId\">Chat ID:</label>\r\n                    <input type=\"text\" value={this.state.chatId} readOnly className=\"form-control\" placeholder=\"Chat ID\" id=\"chatId\"/>\r\n                </div>\r\n                \r\n                <div className=\"form-group form-check\">\r\n                    <label className=\"form-check-label\">\r\n                        <input className=\"form-check-input\" readOnly type=\"checkbox\" name=\"newChat\" checked={this.state.newChat}/> Start New Chat\r\n                    </label>\r\n                </div>\r\n                <button type=\"button\" onClick={this.handleSubmit} className=\"btn btn-primary\">Submit</button>\r\n            </form>\r\n        </>);\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        userDetails.setUserDetails(this.state);\r\n        this.props.history.push('/chat');\r\n    }\r\n}\r\n\r\nexport default Details;","const urls = {\r\n    socketUrl : \"/\"\r\n}\r\n\r\nexport default urls;","import * as React from 'react';\r\nimport userDetails from '../apis/detailsAPI';\r\nimport Heading from './heading';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport urls from '../constants/constants';\r\n\r\nclass Chat extends React.Component {\r\n    chatId;\r\n    state = {\r\n        user: {},\r\n        users: [],\r\n        messages: [],\r\n        chatId: \"\"\r\n    }\r\n    socket = null;\r\n    constructor(props) {\r\n        super(props);\r\n        if(!userDetails.getUserDetails()) {\r\n            this.props.history.push('/');\r\n            return;\r\n        }\r\n        this.state = {\r\n            user: userDetails.getUserDetails(),\r\n            users: [],\r\n            messages: [],\r\n            chatId: \"\"\r\n        }\r\n    }\r\n    render() {\r\n        return (<>\r\n        <div className=\"chat-head\">\r\n        <Heading>Anonymous Chat - {this.state.user.name}</Heading>\r\n        <div>Users- {this.state.users.map(user=>(user.name && user.chatId == this.state.chatId) ? (user.name + \",\") : \"\")}</div>\r\n        <div>Chat Link - {window.location.href + \"/\" + this.state.chatId}</div>\r\n        </div>\r\n            <div className=\"row chat-container\">\r\n                <div className=\"col-12 chat\">\r\n                    {this.state.messages.map(message=>{\r\n                        return <div class={(message._id === this.socket.id ? \"mine\" : \"yours\") + \" messages\"}>\r\n                            <div class=\"message last\">\r\n                            {message.message}\r\n                            </div>\r\n                            <span className=\"chatee\">{message.name}</span>\r\n                        </div>\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <div className=\"row message-input\">\r\n                <div className=\"col-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-10\">\r\n                            <input type=\"text\" value={this.state.chatMessage} name=\"chatMessage\" onChange={this.handleChange} onKeyPress={(e)=>{e.which === 13 && this.sendMessage()}} className=\"col-12 form-control\" placeholder=\"chatMessage\" />\r\n                        </div>\r\n                        <div className=\"col-2\">\r\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={this.sendMessage}>Send</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>);\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        let {name, value} = event.target;\r\n        this.setState({[name]:value});\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.socket == null) {\r\n            this.socket = socketIOClient(urls.socketUrl);\r\n            this.socket.on('connection',()=>{\r\n                console.log(\"connected\");\r\n            })\r\n            this.socket.emit(\"userDetails\", this.state.user);\r\n            this.socket.on(\"message\", data => {\r\n                //this.setState({messages: data});\r\n                if(this.state.chatId == data.chatId) {\r\n                    const messages = JSON.parse(JSON.stringify(this.state.messages));\r\n                    messages.push(data);\r\n                    this.setState({messages});\r\n                }\r\n            });\r\n            this.socket.on(\"users\", (data)=>{\r\n                this.setState({users: data});\r\n                data.map(user=>{\r\n                    if(user._id === this.socket.id) {\r\n                        this.chatId = user.chatId;\r\n                        this.setState({chatId: user.chatId});\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    sendMessage = () => {\r\n        this.socket.emit('chatMessage', {message: this.state.chatMessage, chatId: this.chatId, name: this.state.user.name});\r\n        this.setState({chatMessage: \"\"});\r\n    }\r\n}\r\n\r\nexport default Chat;","import React from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport Details from './components/details';\nimport Chat from './components/chat';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container mt-3\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <HashRouter>\n            <Switch>\n              <Route path=\"/\" exact component={Details}></Route>\n              <Route path=\"/chat/:chatId\" exact component={Details}></Route>\n              <Route path=\"/chat\" exact component={Chat}></Route>\n            </Switch>\n          </HashRouter>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}